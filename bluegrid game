<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>BlueGrid: Tactical Browser Shooter</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      font-family: sans-serif;
    }
    canvas {
      display: block;
      background: #222;
    }
    #ui {
      position: absolute;
      top: 10px;
      left: 10px;
      color: white;
      z-index: 10;
    }
    #briefingBox, #cutsceneBox, #levelSelectBox {
      position: absolute;
      top: 20%;
      left: 50%;
      transform: translateX(-50%);
      width: 60%;
      background: rgba(0,0,0,0.85);
      padding: 20px;
      border: 2px solid #59a4db;
      color: white;
      font-size: 1.2em;
      display: none;
      z-index: 100;
    }
    #briefingBox button, #cutsceneBox button, #levelSelectBox button {
      margin-top: 15px;
      padding: 10px 20px;
      background: #59a4db;
      border: none;
      cursor: pointer;
    }
    .level-button {
      display: inline-block;
      margin: 5px;
      padding: 10px;
      background: #444;
      border: 1px solid #aaa;
      color: white;
      cursor: pointer;
    }
    #cutsceneText {
      animation: fadein 2s ease-in-out forwards;
      opacity: 0;
    }
    @keyframes fadein {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas"></canvas>
  <div id="ui">
    <h1>BlueGrid PMC</h1>
    <p>Level: <span id="level">1</span></p>
    <p>Enemies Remaining: <span id="enemyCount">0</span></p>
    <p>Health: <span id="playerHealth">100</span></p>
    <p>Score: <span id="score">0</span></p>
    <button onclick="saveGame()">Save</button>
    <button onclick="loadGame()">Load</button>
    <button onclick="showLevelSelect()">Select Level</button>
  </div>

  <div id="cutsceneBox">
    <div id="cutsceneText">Loading...</div>
    <button onclick="endCutscene()">Continue</button>
  </div>

  <div id="briefingBox">
    <div id="briefingText">Loading...</div>
    <button onclick="startLevel()">Begin Mission</button>
  </div>

  <div id="levelSelectBox">
    <div>Select Level:</div>
    <div id="levelButtons"></div>
    <button onclick="closeLevelSelect()">Close</button>
  </div>

  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let player = { x: canvas.width / 2, y: canvas.height - 100, size: 30, health: 100, score: 0 };
    let bullets = [];
    let enemies = [];
    let level = 1;
    let gameRunning = false;

    const enemyCountDisplay = document.getElementById("enemyCount");
    const healthDisplay = document.getElementById("playerHealth");
    const scoreDisplay = document.getElementById("score");
    const levelDisplay = document.getElementById("level");

    const briefingBox = document.getElementById("briefingBox");
    const briefingText = document.getElementById("briefingText");

    const cutsceneBox = document.getElementById("cutsceneBox");
    const cutsceneText = document.getElementById("cutsceneText");

    const levelSelectBox = document.getElementById("levelSelectBox");
    const levelButtons = document.getElementById("levelButtons");

    const briefings = [
      "Mission 1: Infiltrate the perimeter. Neutralize all threats.",
      "Mission 2: Intel intercepted. More enemies inbound. Eliminate them.",
      "Mission 3: Nightfall is near. Clear the field and hold your ground.",
      "Mission 4: High-value targets spotted. Take them out.",
      "Mission 5: Final wave approaching. Survive the assault."
    ];

    const cutscenes = [
      "BlueGrid Command: Our operatives have breached enemy lines.",
      "HQ Update: Expect heavier resistance moving forward.",
      "Nightfall operations have begun. Visuals are limited.",
      "Sniper squads are deployed. Stay in cover.",
      "Final objective reached. Brace for impact."
    ];

    function showCutscene() {
      cutsceneText.style.opacity = 0;
      void cutsceneText.offsetWidth; // restart animation
      let text = cutscenes[(level - 2) % cutscenes.length] || "Next deployment in progress...";
      cutsceneText.innerText = text;
      cutsceneBox.style.display = 'block';
      gameRunning = false;
    }

    function endCutscene() {
      cutsceneBox.style.display = 'none';
      showBriefing();
    }

    function showBriefing() {
      let text = briefings[(level - 1) % briefings.length] || "Mission: Proceed with caution. Expect resistance.";
      briefingText.innerText = text;
      briefingBox.style.display = 'block';
      gameRunning = false;
    }

    function startLevel() {
      briefingBox.style.display = 'none';
      spawnEnemies(5 + level * 2);
      gameRunning = true;
    }

    function spawnEnemies(count) {
      enemies = [];
      for (let i = 0; i < count; i++) {
        enemies.push({ x: Math.random() * canvas.width, y: Math.random() * 200, size: 30, alive: true, speed: 1 + Math.random() + level * 0.3 });
      }
      enemyCountDisplay.innerText = enemies.length;
    }

    function drawPlayer() {
      ctx.fillStyle = 'cyan';
      ctx.beginPath();
      ctx.arc(player.x, player.y, player.size, 0, Math.PI * 2);
      ctx.fill();
    }

    function drawEnemies() {
      enemies.forEach(e => {
        if (e.alive) {
          ctx.fillStyle = 'red';
          ctx.beginPath();
          ctx.arc(e.x, e.y, e.size, 0, Math.PI * 2);
          ctx.fill();
        }
      });
    }

    function drawBullets() {
      bullets.forEach(b => {
        ctx.fillStyle = 'yellow';
        ctx.fillRect(b.x - 2, b.y, 4, 10);
      });
    }

    function update() {
      if (!gameRunning) return requestAnimationFrame(update);

      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawPlayer();
      drawEnemies();
      drawBullets();

      bullets.forEach(b => b.y -= 10);
      bullets = bullets.filter(b => b.y > 0);

      enemies.forEach(e => {
        if (e.alive) e.y += e.speed;
        if (e.alive && Math.hypot(player.x - e.x, player.y - e.y) < player.size + e.size) {
          player.health -= 10;
          e.alive = false;
        }
      });

      bullets.forEach(b => {
        enemies.forEach(e => {
          if (e.alive && Math.hypot(b.x - e.x, b.y - e.y) < e.size) {
            e.alive = false;
            player.score += 100;
          }
        });
      });

      enemies = enemies.filter(e => e.alive);
      enemyCountDisplay.innerText = enemies.length;
      healthDisplay.innerText = player.health;
      scoreDisplay.innerText = player.score;

      if (player.health <= 0) {
        alert("Mission Failed. Final Score: " + player.score);
        document.location.reload();
      }

      if (enemies.length === 0) {
        level++;
        levelDisplay.innerText = level;
        showCutscene();
      }

      requestAnimationFrame(update);
    }

    function saveGame() {
      localStorage.setItem("bluegrid_level", level);
      localStorage.setItem("bluegrid_score", player.score);
      localStorage.setItem("bluegrid_health", player.health);
      alert("Game saved.");
    }

    function loadGame() {
      level = parseInt(localStorage.getItem("bluegrid_level")) || 1;
      player.score = parseInt(localStorage.getItem("bluegrid_score")) || 0;
      player.health = parseInt(localStorage.getItem("bluegrid_health")) || 100;
      levelDisplay.innerText = level;
      scoreDisplay.innerText = player.score;
      healthDisplay.innerText = player.health;
      showCutscene();
    }

    function showLevelSelect() {
      levelSelectBox.style.display = 'block';
      levelButtons.innerHTML = '';
      for (let i = 1; i <= 10; i++) {
        const btn = document.createElement('button');
        btn.className = 'level-button';
        btn.innerText = 'Level ' + i;
        btn.onclick = () => {
          level = i;
          levelDisplay.innerText = level;
          player.health = 100;
          player.score = 0;
          levelSelectBox.style.display = 'none';
          showCutscene();
        };
        levelButtons.appendChild(btn);
      }
    }

    function closeLevelSelect() {
      levelSelectBox.style.display = 'none';
    }

    window.addEventListener("mousemove", e => {
      player.x = e.clientX;
    });

    window.addEventListener("click", () => {
      if (gameRunning) bullets.push({ x: player.x, y: player.y - player.size });
    });

    showBriefing();
    update();
  </script>
</body>
</html>
